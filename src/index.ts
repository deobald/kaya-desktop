import { app, BaseWindow, BrowserWindow, Menu, MenuItem, Tray } from 'electron';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// HACK: find the tray with some sort of channeling or singaling instead
let tray:Tray = null;
let window:BrowserWindow = null;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  mainWindow.on('show', onWindowShow);
  mainWindow.on('hide', onWindowHide);

  window = mainWindow;
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

// HACK: Nasty way of finding our window; Signal's SettingsChannel method is preferable
//       We can't use 'window' because it becomes null when hidden.
const findWindow = (): BrowserWindow => {
  if (BrowserWindow.getAllWindows().length != 1) {
    throw RangeError("Too many windows.");
  }
  return BrowserWindow.getAllWindows()[0];
};

const onWindowShow = (): void => {
  const contextMenu = Menu.buildFromTemplate([
    { label: 'Hide', type: 'normal', click: onClickHide },
    { label: 'Quit', type: 'normal', click: onClickQuit }
  ]);
  tray.setContextMenu(contextMenu);
};

const onWindowHide = (): void => {
  const contextMenu = Menu.buildFromTemplate([
    { label: 'Show', type: 'normal', click: onClickShow },
    { label: 'Quit', type: 'normal', click: onClickQuit }
  ]);
  tray.setContextMenu(contextMenu);
};

const onClickQuit = (menuItem:MenuItem, window:BaseWindow, e:KeyboardEvent): void => {
  app.quit();
};

const onClickShow = (menuItem:MenuItem, window:BaseWindow, e:KeyboardEvent): void => {
  findWindow().show();
};

const onClickHide = (menuItem:MenuItem, window:BaseWindow, e:KeyboardEvent): void => {
  findWindow().hide();
};

app.whenReady().then(() => {
  tray = new Tray('/home/steven/work/deobald/kaya-desktop/fire.png');
  tray.setToolTip('Kaya');

  if (findWindow().isVisible()) {
    onWindowShow();
  } else {
    onWindowHide();
  }
});
